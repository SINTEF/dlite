"""Configuration file for the Sphinx documentation builder.

For the full list of built-in configuration values, see the documentation:
https://www.sphinx-doc.org/en/master/usage/configuration.html
"""
import os
import sys
from pathlib import Path
import re
from typing import TYPE_CHECKING
from subprocess import call

if TYPE_CHECKING:  # pragma: no cover
    from jinja2 import Environment




# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information

root_doc = "index"
templates_path = ['_templates']
project = "DLite"
copyright = "Â© SINTEF 2024"
author = "SINTEF"
version ="@dlite_VERSION@"


# -- Generate breathe config and generate index files
breathe_projects = {"dlite": "./xml/"}
breathe_default_project = "dlite"


call([sys.executable,
      'respirator.py',
      breathe_projects[breathe_default_project],
      './c-api',
      "./_templates/respirator"])


# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

exclude_patterns = [
    '_build',
    'Thumbs.db',
    '.DS_Store',
    '**.ipynb_checkpoints',
    "_templates",
]

extensions = [
    "autoapi.extension",
    "breathe",  # Doxygen bridge
    "myst_nb",  # markdown source support & support for Jupyter notebooks
    "sphinx.ext.graphviz",  # Graphviz
    "sphinx.ext.intersphinx",  # Connect to external (Sphinx) API documentation
    "sphinx.ext.napoleon",  # API ref Google and NumPy style
    "sphinx.ext.viewcode",
    "sphinxcontrib.plantuml",  # PlantUml
    #"sphinx_toggleprompt",  # Add button for show/hide example prompts
    "sphinx_copybutton",  # Copy button for codeblocks
    "sphinx_design",  # Create panels in a grid layout or as drop-downs and more
]

suppress_warnings = ["myst.mathjax"]

# Extension configuration

dlite_share_plugins = [
    plugin_dir.name
    for plugin_dir in (
        Path("@CMAKE_BINARY_DIR@/bindings/python/dlite/share/dlite")
    ).iterdir()
    if plugin_dir.is_dir()
]

#autoapi_dirs = [
#    "@CMAKE_BINARY_DIR@/bindings/python/dlite"
#] + [
#    f"@CMAKE_BINARY_DIR@/bindings/python/dlite/share/dlite/{plugin_dir}"
#    for plugin_dir in dlite_share_plugins
#]
autoapi_dirs = ["@CMAKE_BINARY_DIR@/bindings/python/dlite"]
autoapi_type = "python"
autoapi_file_patterns = ["*.py", "*.pyi"]
autoapi_template_dir = "_templates/autoapi"
autoapi_add_toctree_entry = True  # Toggle the most top-level index file
autoapi_options = [
    "members",
    "undoc-members",
    "show-inheritance",
    "show-module-summary",
    "special-members",
    "imported-members",
]
autoapi_keep_files = True  # Should be False in production
#autoapi_keep_files = False  # Should be False in production
autoapi_python_use_implicit_namespaces = True  # True to avoid namespace being `python.dlite`
#autoapi_ignore = ["@CMAKE_BINARY_DIR@/doc/_build/autoapi/dlite/dlite"]


autodoc_typehints = "description"
autodoc_typehints_format = "short"
autodoc_inherit_docstrings = True

# Ask copybutton to skip prompts from being copied
#copybutton_exclude = '.linenos, .gp, .go'
copybutton_prompt_text = r" *>>> | *\.\.\. |\$ |In \[\d*\]: | {2,5}\.\.\.: | {5,8}: "
copybutton_prompt_is_regexp = True


####

html_theme = 'sphinx_book_theme'
html_logo = "_static/logo.svg"
html_favicon = "_static/favicon.ico"
html_theme_options = {
    "path_to_docs": "pydoc",
    "repository_url": "https://github.com/SINTEF/dlite",
    "repository_branch": "master",
    "use_issues_button": True,
    "use_fullscreen_button": True,
    "use_repository_button": True,
    #"logo_only": True,
    "show_navbar_depth": 1,
    "announcement": "This documentation is under development!",
}

html_static_path = ["_static"]
# html_css_files = ["custom.css"]

intersphinx_mapping = {
    "numpy": ("https://numpy.org/doc/stable/", None),
    "openpyxl": ("https://openpyxl.readthedocs.io/en/stable/", None),
    "pandas": ("https://pandas.pydata.org/docs/", None),
    "pint": ("https://pint.readthedocs.io/en/stable/", None),
    "pymongo": ("https://pymongo.readthedocs.io/en/stable/", None),
    "python": ("https://docs.python.org/3", None),
    "rdflib": ("https://rdflib.readthedocs.io/en/stable/", None),
    "tripper": ("https://emmc-asbl.github.io/tripper/latest/", None),
}

myst_heading_anchors = 5
myst_enable_extensions = ["colon_fence"]

napoleon_use_admonition_for_examples = True
napoleon_use_admonition_for_notes = True
napoleon_use_admonition_for_references = True
napoleon_preprocess_types = True
napoleon_attr_annotations = True

nb_execution_allow_errors = False
nb_execution_mode = "cache"
if os.getenv("CI"):
    nb_kernel_rgx_aliases = {".*": "python"}

plantuml = "java -jar lib/plantuml.jar"
plantuml_output_format = "svg_img"

####

# Options for the C domain
c_extra_keywords = [
    'alignas',
    #'alignof',  # defined in dlite-type.h
    'bool',
    'complex',
    'imaginary',
    'noreturn',
    'static_assert',
    'thread_local',
]


####

# Jinja2 custom filters
def autoapi_prepare_jinja_env(jinja_env: "Environment") -> None:
    """Add custom Jinja2 filters for use with AutoAPI templates."""

    # Remove plugin path, removes the initial part of the module name
    # if it is equal to any of the folder names under
    # `dlite/share/dlite`.
    jinja_env.filters["remove_plugin_path"] = lambda name: ".".join(
        name.split(".")[1:]
    ) if name.split(".")[0] in dlite_share_plugins else name
