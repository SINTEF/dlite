! -*- f90 -*-  (not really, but good for syntax highlighting)

! This file is generated with dlite-codegen {dlite.version} -- do not edit!
!
! Template: fortran-module.txt
! Metadata: {_uri}
!
! This file instantiate a hardcoded instance of metadata {meta.name}.
!
!
! Fortran interface to {name} entity from {name}.json
!
{have_fixstring_arr=0}\
{list_properties:\
{@if: ({prop.typeno} = 5) & ({prop.ndims} > 0)}\
{have_fixstring_arr=1}\
{@endif}\
}\

module {name}
    USE iso_c_binding, only : c_ptr, c_int, c_char, c_null_char, c_size_t,    &
                              c_double, c_null_ptr, c_f_pointer, c_associated,&
                              c_loc, c_float
    USE c_interface, only: c_f_string, c_strlen_safe, f_c_string
    USE DLite

    IMPLICIT NONE
    PRIVATE

    PUBLIC :: T{name}

    type(DLiteMeta) :: meta_{name%c}

    TYPE T{name}
      type(DLiteInstance)              :: instance
      character(len=36)                :: uuid
      ! -- dimension values
{list_dimensions:{@6}integer(8){@40}:: {dim.name} ! {dim.descr} \n}
      ! -- property values
{list_properties:\
{@6}{prop.ftype}{@if:{prop.ndims}!0}, allocatable{@endif}\
{@40}:: {prop.name}{@if:{prop.ndims}!0}({prop.dims::{,}\.}){@endif}\
 ! {prop.descr} {@if:{prop.ndims}!0} [{prop.dims:{dim.name}{,}\.}]{@endif}\n}
    contains
      procedure :: check => check
      procedure :: writeToURL => writeToURL
      procedure :: writeToSource => writeToSource
      procedure :: writeToStorage => writeToStorage
      procedure :: readFromInstance => readFromInstance
      procedure :: writeToInstance => writeToInstance
      procedure :: destroy => destroy
    END TYPE T{name}

    INTERFACE T{name}
      ! read a {name} from an url
      module procedure readFromURL
      ! read a {name} from a data source (open and close the storage)
      module procedure readFromSource
      ! read a {name} from a open storage
      module procedure readFromStorage
      ! create a {name} and allocate the arrays (type of dimensions: integer(4))
      module procedure create32
{@if:{_ndimensions}>0}
      ! create a {name} and allocate the arrays (type of dimensions: integer(8))
      module procedure create64
{@endif}      
    END INTERFACE T{name}

  contains

  subroutine create_meta_{name%c}()
    type(DLiteMetaModel) :: model
    integer              :: i
    if (.not. meta_{name%c}%check()) then
      model = DLiteMetaModel('{_uri}', 'http://onto-ns.com/meta/0.3/EntitySchema', '')
      i = model%add_string('description', '{descr}')
{list_dimensions:{@6}i = model%add_dimension('{dim.name}', '{dim.descr}')\n}
{list_properties:{@6}i = model%add_property('{prop.name}', '{prop.typename}', '{prop.unit}', '{prop.iri}', '{prop.descr}')\
{@if:{prop.ndims}!0}\n{prop.dims:{@6}i = model%add_property_dim('{prop.name}', '{dim.name}')\n}{@endif}\n}
      meta_{name%c} = DLiteMeta(model)
      call model%destroy()
    endif
  end subroutine create_meta_{name%c}

  function create32({list_dimensions:{dim.name}{, }\.}) result({name%c})
    implicit none
    type(T{name}) :: {name%c}
{list_dimensions:{@4}integer(4)    :: {dim.name}\n}    
    call create_meta_{name%c}()
    {name%c}%instance%cinst = c_null_ptr
    {name%c}%uuid(:) = ' '
{list_dimensions:{@4}{name%c}%{dim.name} = {dim.name}\n}
{list_properties:{@4}! {prop.name}\n{@if:{prop.ndims}!0}{@4}allocate({name%c}%{prop.name}({prop.dims:{dim.name}{,}\.}))\n{@endif}\ }
  end function create32
{@if:{_ndimensions}>0}
  function create64({list_dimensions:{dim.name}{, }\.}) result({name%c})
    implicit none
    type(T{name}) :: {name%c}
{list_dimensions:{@4}integer(8)    :: {dim.name}\n}    
    call create_meta_{name%c}()
    {name%c}%instance%cinst = c_null_ptr
    {name%c}%uuid(:) = ' '
{list_dimensions:{@4}{name%c}%{dim.name} = {dim.name}\n}
{list_properties:{@4}! {prop.name}\n{@if:{prop.ndims}!0}{@4}allocate({name%c}%{prop.name}({prop.dims:{dim.name}{,}\.}))\n{@endif}\ }
  end function create64
{@endif}
  subroutine readFromInstance({name%c}, instance)
    class(T{name})                        :: {name%c}
    type(DLiteInstance), intent(in)       :: instance
    {@if:{_ndimensions}>0}{@3}type(c_ptr){@42}:: cptr{@endif}
    {@if:{_ndimensions}>0}{@3}integer(8), dimension(*), allocatable :: dims(:){@endif}
{@if:{have_fixstring_arr}\.}\
    integer(8)                            :: strlen, nstring, i
{@endif}\

{list_properties:\
{@if:({prop.typeno}=5)&({prop.ndims}=0)}\
{@4}! {prop.isoctype} {@42}:: {prop.name}\n\
{@elif:({prop.typeno}=5)&({prop.ndims}=1)}\
{@4}character(kind=c_char), pointer {@42}:: {prop.name}_p(:,:)\n\
{@elif:{prop.ndims}!0}\
{@4}{prop.isoctype}, pointer {@42}:: {prop.name}_p({prop.dims::{,}\.})\n\
{@else}\
{@4}{prop.isoctype}, pointer {@42}:: {prop.name}_p\n\
{@endif}\ }

    if (instance%check()) then
      {name%c}%instance = instance
      {name%c}%uuid = instance%get_uuid()
{list_dimensions:{@6}{name%c}%{dim.name} = instance%get_dimension_size_by_index({dim.i})\n}
{list_properties:\
{@6}! {prop.name}\n\
{@if:({prop.typeno}=5)&({prop.ndims}=0)}\
{@6}call c_f_string(instance%get_property_by_index({prop.i}), {name%c}%{prop.name})\n\
{@elif:({prop.typeno}=5)&({prop.ndims}=1)}\
{@6}cptr = instance%get_property_by_index({prop.i})\n\
{@6}call instance%get_property_dims_by_index({prop.i}, dims)\n\
{@6}nstring = dims(1)\n\
{@6}strlen = {prop.size}\n\
{@6}call c_f_pointer(cptr, {prop.name}_p, [strlen, nstring])\n\
{@6}allocate({name%c}%{prop.name}(nstring))\n\
{@6}do i = 1, nstring
{@8}call c_f_string({prop.name}_p(:,i), {name%c}%{prop.name}(i))
{@6}end do
{@elif:{prop.ndims}!0}\
{@6}cptr = instance%get_property_by_index({prop.i})\n\
{@6}call instance%get_property_dims_by_index({prop.i}, dims, .true.)\n\
{@6}call c_f_pointer(cptr, {prop.name}_p, dims)\n\
{@else}\
{@6}cptr = instance%get_property_by_index({prop.i})\n\
{@6}call c_f_pointer(cptr, {prop.name}_p)\n\
{@6}{name%c}%{prop.name} = {prop.name}_p\n\
{@endif}\ }
      ! copy arrays
{list_properties:\
{@if:({prop.typeno}!5)&({prop.ndims}=1)}\
{@6}{name%c}%{prop.name} = {prop.name}_p\n\
{@elif:({prop.typeno}!5)&({prop.ndims}=2)}\
{@6}{name%c}%{prop.name} = transpose({prop.name}_p)\n\
{@endif}\ }
    endif
  end subroutine readFromInstance

  function writeToInstance({name%c}) result(instance)
    class(T{name})                        :: {name%c}
    type(DLiteInstance)                   :: instance
    {@if:{_ndimensions}>0}{@3}type(c_ptr){@42}:: cptr{@endif}
    {@if:{_ndimensions}>0}{@3}integer(8), dimension(*), allocatable :: dims(:){@endif}
    integer(8), dimension({_ndimensions}) :: dimensions    
{list_properties:\
{@if:{prop.typeno}=5}\
{@4}! {prop.isoctype} {@42}:: {prop.name}\n\
{@elif:{prop.ndims}!0}\
{@4}{prop.isoctype}, pointer {@42}:: {prop.name}_p({prop.dims::{,}\.})\n\
{@else}\
{@4}{prop.isoctype}, pointer {@42}:: {prop.name}_p\n\
{@endif}\ }
    if ({name%c}%check()) then
      instance = {name%c}%instance
    else
      {@if:{_ndimensions}>0}{@8}dimensions = [ {list_dimensions:{name%c}%{dim.name}{, }\.} ]{@endif}
      instance = DLiteInstance(&
                    '{_uri}', &
                    {_ndimensions}, &
                    dimensions, &
                    {name%c}%uuid)
      {name%c}%instance = instance
    endif
{list_properties:\
{@4}! {prop.name}\n\
{@if:{prop.typeno}=5}\
{@4}call dlite_instance_set_property_value(instance, {prop.i}, {name%c}%{prop.name})\n\
{@elif:{prop.ndims}!0}\
{@4}cptr = instance%get_property_by_index({prop.i})\n\
{@4}call instance%get_property_dims_by_index({prop.i}, dims, .true.)\n\
{@4}call c_f_pointer(cptr, {prop.name}_p, dims)\n\
{@else}\
{@4}cptr = instance%get_property_by_index({prop.i})\n\
{@4}call c_f_pointer(cptr, {prop.name}_p)\n\
{@4}{prop.name}_p = {name%c}%{prop.name}\n\
{@endif}\ }
    ! copy arrays
{list_properties:\
{@if:({prop.typeno}!5)&({prop.ndims}=1)}\
{@4}{prop.name}_p = {name%c}%{prop.name}\n\
{@elif:({prop.typeno}!5)&({prop.ndims}=2)}\
{@4}{prop.name}_p = transpose({name%c}%{prop.name})\n\
{@endif}\ }
  end function writeToInstance

  function check({name%c}) result(status)
    implicit none
    class(T{name}), intent(in) :: {name%c}
    logical                    :: status
    status = {name%c}%instance%check()
  end function check

  function readFromURL(url) result({name%c})
    implicit none
    character(len=*), intent(in)    :: url
    type(T{name})                   :: {name%c}
    type(DLiteInstance)             :: instance
    call create_meta_{name%c}()
    instance = DLiteInstance(url)
    call {name%c}%readFromInstance(instance)
  end function readFromURL

  function readFromSource(driver, location, options, uid) result({name%c})
    implicit none
    character(len=*), intent(in) :: driver
    character(len=*), intent(in) :: location
    character(len=*), intent(in) :: options
    character(len=*), intent(in) :: uid
    type(T{name})                :: {name%c}
    type(DLiteStorage)           :: storage
    integer                      :: status
    call create_meta_{name%c}()
    storage = DLiteStorage(driver, location, options)
    {name%c} = readFromStorage(storage, uid)
    status = storage%close()
  end function readFromSource

  function readFromStorage(storage, uid) result({name%c})
    implicit none
    type(DLiteStorage), intent(in)  :: storage
    character(len=*), intent(in)    :: uid
    type(T{name})                   :: {name%c}
    type(DLiteInstance)             :: instance
    call create_meta_{name%c}()
    instance = DLiteInstance(storage, uid)
    call {name%c}%readFromInstance(instance)
  end function readFromStorage

  function writeToURL({name%c}, url) result(status)
    implicit none
    class(T{name}), intent(in)     :: {name%c}
    character(len=*), intent(in)   :: url
    type(DLiteInstance)            :: instance
    integer                        :: status
    instance = {name%c}%writeToInstance()
    status = instance%save_url(url)
  end function writeToURL

  function writeToSource({name%c}, driver, location, options) result(status)
    implicit none
    class(T{name}), intent(in)   :: {name%c}
    character(len=*), intent(in) :: driver
    character(len=*), intent(in) :: location
    character(len=*), intent(in) :: options
    type(DLiteStorage)           :: storage
    integer                      :: status, status2
    storage = DLiteStorage(driver, location, options)
    status = {name%c}%writeToStorage(storage)
    status2 = storage%close()
  end function writeToSource

  function writeToStorage({name%c}, storage) result(status)
    implicit none
    class(T{name}), intent(in)     :: {name%c}
    type(DLiteStorage), intent(in) :: storage
    type(DLiteInstance)            :: instance
    integer                        :: status
    instance = {name%c}%writeToInstance()
    status = instance%save(storage)
  end function writeToStorage

  function destroy({name%c}) result(status)
    implicit none
    class(T{name}), intent(in)     :: {name%c}
    integer                        :: status
    status = {name%c}%instance%destroy()
  end function destroy  

end module
