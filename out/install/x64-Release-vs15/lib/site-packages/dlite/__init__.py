import sys
import os
from pathlib import Path

def _dlite_use_build_root():
    return 'DLITE_USE_BUILD_ROOT' in os.environ and not os.environ['DLITE_USE_BUILD_ROOT'].lower() in ('0', 'no', 'false', '.false.', 'off')


# Add sanity check regarding DLITE_USE_BUILD_ROOT environment variables
if _dlite_use_build_root():
    #assert 'DLITE_ROOT' in os.environ
    from .paths import dlite_BUILD_ROOT
    assert Path(dlite_BUILD_ROOT).is_dir()


if sys.platform == 'win32':

    # When building and testing the Python package via CTest, we set the PYTHONPATH to the
    # SWIG-generated package root in the build tree. in addition, shared libraries generated
    # during the build must be accessible.
    # For Linux, we take care of this by defining LD_LIBRARY_PATH in the test-environments.

    # For Windows, the approach depends on the Python which is being used

    # (a) For Anaconda Python on Windows, it is sufficient to add the dll directories to PATH
    #     before calling Python. _dlite.pyd can then find and load the dlls it depends on. We add
    #     the paths to the dlls generated during the build to the CTest environments PATH.

    # (b) For CPython, setting the PATH is not sufficient. This may be related to the
    #     following bug recognised by the numpy cummunity: https://github.com/numpy/numpy/issues/12667
    #     For CPython: To work around, call AddDllDirectory() directly via ctypes to set the
    #     search path on Windows.
    #
    #     To complicate things, this now does not work for Anaconda Python on Windows:
    #     https://github.com/pytorch/pytorch/issues/17051
    #     And: Using Anaconda Python as embedded Python on Windows has its own issues. We
    #     must n addition set the PYTHONHOME in the CTest environment:
    #     https://github.com/pybind/pybind11/issues/2369
    #     https://github.com/ContinuumIO/anaconda-issues/issues/11374

    try:
        import conda
    except:
        is_conda_base = False
        is_conda = os.path.exists(os.path.join(sys.prefix, 'conda-meta'))
    else:
        assert os.path.exists(os.path.join(sys.prefix, 'conda-meta'))
        is_conda_base = True
        is_conda = True

    if not is_conda:
        from ctypes import windll, c_wchar_p
        from ctypes.wintypes import DWORD
        from .paths import dlite_INSTALL_ROOT, dlite_PATH

        AddDllDirectory = windll.kernel32.AddDllDirectory
        AddDllDirectory.restype = DWORD
        AddDllDirectory.argtypes = [c_wchar_p]

        if ('DLITE_USE_BUILD_ROOT' in os.environ and
            not os.environ['DLITE_USE_BUILD_ROOT'].lower() in
                ('0', 'no', 'false', '.false.', 'off')):
            for path in dlite_PATH.split(';'):
                AddDllDirectory(str(Path(path)))
        else:
            AddDllDirectory(str(Path(dlite_INSTALL_ROOT) / 'bin'))

        del c_wchar_p, DWORD, dlite_INSTALL_ROOT, dlite_PATH
        del AddDllDirectory

    del is_conda, is_conda_base

del _dlite_use_build_root

from .dlite import *  # noqa: F401, F403
from .factory import classfactory, objectfactory, loadfactory  # noqa: F401

