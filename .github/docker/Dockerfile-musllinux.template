# -*- Mode: Dockerfile -*-
# Dockerfile for building Python pypi package with musllinux
#
# Usage:
#
# Copy this template file and replace:
# - `{{ TYPE }}` with a valid musllinux type, e.g. '_1_1' or '_1_2'
# - `{{ ARCH }}` with a valid arch, e.g., x86_64 or i686
# Remove the `.template` suffix from the copy.
#
# Examples
# --------
#
# Generate dockerfile:
#
#     .github/docker/gen_dockerfile.sh musllinux _1_2 x86_64 > \
#         .github/docker/dockerfiles/Dockerfile-musllinux_1_2_x86_64
#
# Build:
#
#     cd dlite  # cd to DLite root directory
#     docker build -t dlite-musllinux_1_2_x86_64 \
#         -f .github/docker/Dockerfile-musllinux_1_2_x86_64 .
#
# Run (for debugging):
#
#     docker run --rm -it \
#         --volume $PWD:/io \
#         --user $(id -u):$(id -g) \
#         dlite-musllinux_1_2_x86_64 \
#         /bin/bash
#
FROM quay.io/pypa/musllinux{{ TYPE }}_{{ ARCH }}:latest

ARG PY_MINORS="8 9 10 11 12"

# Do not use distutils distributed with setuptools
# This is due to base changes in the distutils API, removing msvccompiler,
# which is necessary for building the numpy wheel.
ENV SETUPTOOLS_USE_DISTUTILS="stdlib"

RUN apk add -u \
  redland \
  rasqal \
  hdf5-dev \
  openssl-dev \
  swig && \
  # Unpack static libraries
  # It's necessary to be in /opt/_internal because the internal libraries
  # exist here.
  cd /opt/_internal && \
  tar -Jxvf static-libs-for-embedding-only.tar.xz && \
  # Filter minor versions
  minors=$( for n in $PY_MINORS; do \
    if [ $(uname -m) == "i686" -o $n -lt 12 ]; then echo $n; fi; \
  done ) && \
  echo "*** Minors: $minors" && \
  # Install required Python packages
  mkdir -p /ci/pip_cache && \
  for minor in ${minors}; do \
    python3.${minor} -m pip install -U pip && \
    python3.${minor} -m pip install -U setuptools wheel; \
    python3.${minor} -m pip install -U --cache-dir /ci/pip_cache \
      oldest-supported-numpy; \
  done && \
  rm -rf /ci/pip_cache
