# -*- Mode: Dockerfile -*-
# Dockerfile for building Python pypi package with musllinux
#
# Usage:
#
# Copy this template file and replace:
# - `{{ TYPE }}` with a valid musllinux type, e.g. '_1_1' or '_1_2'
# - `{{ ARCH }}` architecture, ex:  x86_64, i686
# - `{{ PY_MINORS }}` minor Python3 version numbers, ex: "8 9 10 11 12"
# - `{{ EXTRA_PRE }}` extra commands before installation
# - `{{ EXTRA_POST }}` extra commands after installation
# Remove the `.template` suffix from the copy.
#
# Examples
# --------
#
# Generate dockerfile:
#
#     .github/docker/gen_dockerfile.sh musllinux _1_2 x86_64 > \
#         .github/docker/dockerfiles/Dockerfile-musllinux_1_2_x86_64
#
# Build:
#
#     cd dlite  # cd to DLite root directory
#     docker build -t dlite-musllinux_1_2_x86_64 \
#         -f .github/docker/dockerfiles/Dockerfile-musllinux_1_2_x86_64 .
#
# Run (for debugging):
#
#     docker run --rm -it \
#         --volume $PWD:/io \
#         --user $(id -u):$(id -g) \
#         dlite-musllinux_1_2_x86_64 \
#         /bin/bash
#
FROM quay.io/pypa/musllinux{{ TYPE }}_{{ ARCH }}:latest

COPY requirements.txt requirements_full.txt requirements_dev.txt /tmp/

{{ EXTRA_PRE }}

# Do not use distutils distributed with setuptools
# This is due to base changes in the distutils API, removing msvccompiler,
# which is necessary for building the numpy wheel.
#ENV SETUPTOOLS_USE_DISTUTILS="stdlib"

RUN \
  apk add -u \
    redland-dev \
    rasqal-dev \
    hdf5-dev \
    openssl-dev \
    openblas-dev \
    swig \
    rust \
    cargo && \
  # Unpack static libraries
  # It's necessary to be in /opt/_internal because the internal libraries
  # exist here.
  cd /opt/_internal && \
  tar -Jxvf static-libs-for-embedding-only.tar.xz && \
  # Filter out challenging packages from requirements_full.txt
    #-e 's/^pydantic.*/pydantic<2/' \
  sed \
    -e '/pandas/d' \
    -e '/pyarrow/d' \
    -e '/tables/d' \
    -e '/jinja2/d' \
    -e '/pydantic/d' \
    -e '/matplotlib/d' \
    -e '/scikit-image/d' \
    -e '/ncempy/d' \
    -e '/h5py/d' \
    -e '/pymongo/d' \
    -e '/fortran-language-server/d' \
    -i /tmp/requirements_full.txt && \
  sed \
    -e '/mongomock/d' \
    -i /tmp/requirements_dev.txt

ARG PY_MINORS="{{ PY_MINORS }}"

RUN \
  # Install required Python packages
  mkdir -p /ci/pip_cache && \
  for minor in ${PY_MINORS}; do \
    python3.${minor} -m pip install --cache-dir=/ci/pip_cache -U pip && \
    python3.${minor} -m pip install --cache-dir=/ci/pip_cache \
      -U setuptools wheel && \
    python3.${minor} -m pip install --cache-dir=/ci/pip_cache \
      -r /tmp/requirements.txt \
      -r /tmp/requirements_dev.txt \
      -r /tmp/requirements_full.txt; \
  done && \
  rm -rf /ci/pip_cache

{{ EXTRA_POST }}
