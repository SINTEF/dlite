# -*- Mode: Dockerfile -*-

#
# Build this docker with
#
#     docker build -t dlite-mingw -f Dockerfile-mingw .
#
# To run this docker in an interactive bash shell, do
#
#     docker run -i -t dlite-mingw
#
# A more realistic way to use this docker is to put the following
# into a shell script (called dlite)
#
#     #!/bin/sh
#     docker run --rm -it --user="$(id -u):$(id -g)" --net=none \
#         -v "$PWD":/data dlite "$@"
#
# To run the getuuid tool, you could then do
#
#     dlite dlite-getuuid <string>
#
# To run a python script in current directory
#
#     dlite python /data/script.py
#


##########################################
# Stage: install dependencies
##########################################
FROM fedora:33 AS dependencies

RUN dnf update -y
RUN dnf install -y \
        git \
        file \
        make \
        cmake \
        patch \
        which \
        diffutils \
        dos2unix \
        findutils \
        swig \
        cppcheck \
        doxygen \
        ccache \
        wine-core \
        wine-filesystem \
        mingw-filesystem-base \
        mingw-binutils-generic \
        mingw64-filesystem \
        mingw64-crt \
        mingw64-pkg-config \
        mingw64-zlib \
        mingw64-winpthreads \
        mingw64-headers \
        mingw64-binutils \
        mingw64-gcc \
        mingw64-cpp \
        mingw64-sqlite \
        mingw64-openssl \
        mingw64-python3 \
        mingw64-python3-numpy \
        mingw64-gcc-gfortran \
        mingw64-gcc-c++ \
        mingw64-dlfcn \
        mingw64-libffi \
        mingw32-nsis

# fc34
#RUN dnf install -y  mingw64-python3-pyyaml

#        redland \
#        raptor2 \
#        rasqal


# Enable transparently running Windows executables
#RUN dnf install -y wine-systemd
#RUN mount binfmt_misc -t binfmt_misc /proc/sys/fs/binfmt_misc


# Install pip and python packages -- seems not to work properly...
#RUN wine64 /usr/x86_64-w64-mingw32/sys-root/mingw/bin/python3.exe -m ensurepip
#RUN wine64 /usr/x86_64-w64-mingw32/sys-root/mingw/bin/python3.exe \
#        -m pip install PyYAML


# Patch the FindPython3 CMake module to run Python interpreter via wine
COPY cmake/FindPython3-Support.diff .
RUN patch /usr/share/cmake/Modules/FindPython/Support.cmake \
        FindPython3-Support.diff




##########################################
# Stage: build
##########################################
FROM dependencies AS build

# Create and become a normal user
RUN useradd -ms /bin/bash user
USER user
ENV PATH "/usr/x86_64-w64-mingw32/bin:$PATH"
ENV WINEPATH "/usr/x86_64-w64-mingw32/sys-root/mingw/bin:$PATH"
ENV WINEDEBUG fixme-all

# Setup dlite
RUN mkdir -p /home/user/sw/dlite
COPY --chown=user:user bindings /home/user/sw/dlite/bindings
COPY --chown=user:user cmake /home/user/sw/dlite/cmake
COPY --chown=user:user doc /home/user/sw/dlite/doc
COPY --chown=user:user examples /home/user/sw/dlite/examples
COPY --chown=user:user src /home/user/sw/dlite/src
COPY --chown=user:user storages /home/user/sw/dlite/storages
COPY --chown=user:user tools /home/user/sw/dlite/tools
COPY --chown=user:user CMakeLists.txt LICENSE README.md /home/user/sw/dlite/
WORKDIR /home/user/sw/dlite

# Build dlite
RUN mkdir build
WORKDIR /home/user/sw/dlite/build
RUN cmake .. \
        -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchain-win64.cmake \
        -DFORCE_EXAMPLES=OFF \
        -DALLOW_WARNINGS=ON \
        -DWITH_HDF5=OFF \
        -DWITH_FORTRAN=ON \
        -DWITH_PYTHON=ON \
        -DWITH_REDLAND=OFF \
        -DCMAKE_INSTALL_PREFIX=/tmp/dlite-install
RUN make

# Create distributable packages
RUN cpack -G NSIS

USER root
RUN make install


## Skip postgresql tests since we haven't set up the server and
## static-code-analysis since it is already done.
## TODO - set up postgresql server and run the postgresql tests...
USER user
RUN ctest -E "(postgresql|static-code-analysis)" || \
    ctest -E "(postgresql|static-code-analysis)" \
        --rerun-failed --output-on-failure -VV
