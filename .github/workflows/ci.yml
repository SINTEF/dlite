name: CI tests

on: [push]

env:
  container_registry: ghcr.io

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Update submodules
      run: |
        git submodule init
        git submodule update
    - name: Get Cmake version
      run: |
        cmake --version
    - name: Install dependencies
      run: |
        sudo apt-get update --fix-missing
        sudo apt-get install \
          libjansson-dev \
          libhdf5-dev \
          swig3.0 \
          doxygen \
          graphviz \
          python3 \
          python3-pip \
          python3-dev \
          python3-numpy \
          python3-yaml \
          python3-psycopg2
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip -r requirements.txt
    - name: check numpy
      run: |
        which python3
        python3 --version
        pip3 --version
        python3 -c 'import numpy as np; print(np.get_include())'
    - name: configure
      run: |
        mkdir build
        cd build
        Python3_ROOT=$(python3 -c 'import sys; print(sys.exec_prefix)') \
          CFLAGS='-Wno-missing-field-initializers' \
          cmake .. -DFORCE_EXAMPLES=ON
        cd -
    - name: make
      run: |
        cd build
        make
        cd -
    - name: install
      run: |
        cd build
        make install
        cd -
    - name: make test
      run: |
        cd build
        ctest || ctest --rerun-failed --output-on-failure -V
        cd -
    - name: build Linux wheel
      run: |
        cd python
        pip install numpy wheel
        python3 setup.py bdist_wheel
        cd -
    - name: Install python package via setup.py and test the installation
      run: |
         cd python
         python3 setup.py install --user
         cd ../bindings/python/tests
         python3 __main__.py

  # Temporary placement for this job - will eventually be moved to cd.yml
  # build_wheel_linux_dockers:
  #   name: Build wheel containers
  #   runs-on: ubuntu-20.04
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #       # 64-bit linux
  #       - system: "manylinux"
  #         type: "2010"
  #         arch: "x86_64"
  #         py_minors: "7 8 9"
  #       - system: "manylinux"
  #         type: "2014"
  #         arch: "x86_64"
  #         py_minors: "7 8 9 10"
  #       - system: "musllinux"
  #         type: "_1_1"
  #         arch: "x86_64"
  #         py_minors: "7 8 9 10"

  #       # 32-bit linux
  #       - system: "manylinux"
  #         type: "2010"
  #         arch: "i686"
  #         py_minors: "7 8 9"
  #       # Doesn't seem to be working
  #       # - system: "manylinux"
  #       #   type: "2014"
  #       #   arch: "i686"
  #       #   py_minors: "7 8 9"
  #       - system: "musllinux"
  #         type: "_1_1"
  #         arch: "i686"
  #         py_minors: "7 8 9 10"

  #   steps:
  #     - uses: actions/checkout@v2

  #     - uses: docker/setup-buildx-action@v1

  #     - name: Create docker file
  #       run: |
  #         mkdir -p docker_build_wheel

  #         sed \
  #           -e "s|{{ ARCH }}|${{ matrix.arch }}|" \
  #           -e "s|{{ TYPE }}|${{ matrix.type }}|" \
  #           .github/docker/Dockerfile-${{ matrix.system }}.template \
  #           > docker_build_wheel/Dockerfile-${{ matrix.system }}${{ matrix.type }}_${{ matrix.arch }}

  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ${{ env.container_registry }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build and push dockerfile
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         file: docker_build_wheel/Dockerfile-${{ matrix.system }}${{ matrix.type }}_${{ matrix.arch }}
  #         tags: ${{ env.container_registry }}/sintef/dlite-python-${{ matrix.system }}${{ matrix.type }}_${{ matrix.arch }}:latest
  #         push: true
  #         build-args: |
  #           PY_MINORS=${{ matrix.py_minors }}

  build_wheels:
    # needs: [build_wheel_linux_dockers]
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # 32-bit linux
          - os: ubuntu-20.04
            system_type: ["manylinux", "2010"]
            arch: i686
            py_minors: 7,8,9
          ## Doesn't seem to be working - cannot build image for this
          # - os: ubuntu-20.04
          #   system_type: ["manylinux", "2014"]
          #   arch: i686
          #   py_minors: 7,8,9
          - os: ubuntu-20.04
            system_type: ["musllinux", "_1_1"]
            arch: i686
            py_minors: 7,8,9,10

          # 64-bit linux
          - os: ubuntu-20.04
            system_type: ["manylinux", "2010"]
            arch: x86_64
            py_minors: 7,8,9
          - os: ubuntu-20.04
            system_type: ["manylinux", "2014"]
            arch: x86_64
            py_minors: 7,8,9,10
          - os: ubuntu-20.04
            system_type: ["musllinux", "_1_1"]
            arch: x86_64
            py_minors: 7,8,9,10

          # 32-bit Windows
          - os: windows-2019
            system_type: ["win32", ""]
            arch: ""
            py_minors: 7,8,9,10

          # 64-bit Windows
          - os: windows-2019
            system_type: ["win", ""]
            arch: amd64
            py_minors: 7,8,9,10

          # 64-bit (Intel) macOS
          - os: macos-10.15
            system_type: ["macosx", ""]
            arch: x86_64
            py_minors: 7,8,9,10

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Login to GitHub Container Registry
        if: startsWith(matrix.os, 'ubuntu')
        uses: docker/login-action@v1
        with:
          registry: ${{ env.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          python -m pip install -U cibuildwheel

      # See pyproject.toml (under python/) for cibuildwheel configuration
      - name: Build wheels
        run: |
          python -m cibuildwheel --print-build-identifiers python
          python -m cibuildwheel --output-dir wheelhouse python
        env:
          CIBW_BUILD: cp3{${{ matrix.py_minors }}}-${{ matrix.system_type[0] }}${{ matrix.arch != '' && '_' || '' }}${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-manylinux${{ matrix.system_type[1] }}_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-manylinux${{ matrix.system_type[1] }}_i686:latest
          CIBW_MUSLLINUX_X86_64_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-musllinux_1_1_x86_64:latest
          CIBW_MUSLLINUX_I686_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-musllinux_1_1_i686:latest

      - uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl
