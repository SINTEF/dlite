name: CI tests

on: [push]

jobs:
  build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    - name: Update submodules
      run: |
        git submodule init
        git submodule update
    - name: Get Cmake version
      run: |
        cmake --version
    - name: Install dependencies
      run: |
        sudo apt-get update --fix-missing
        sudo apt-get install \
          libjansson-dev \
          libhdf5-dev \
          swig3.0 \
          doxygen \
          graphviz \
          python3 \
          python3-pip \
          python3-dev \
          python3-numpy \
          python3-yaml \
          python3-psycopg2
    - name: Install Python dependencies
      run: |
        pip install --upgrade pip -r requirements.txt
    - name: check numpy
      run: |
        which python3
        python3 --version
        pip3 --version
        python3 -c 'import numpy as np; print(np.get_include())'
    - name: configure
      run: |
        mkdir build
        cd build
        Python3_ROOT=$(python3 -c 'import sys; print(sys.exec_prefix)') \
          CFLAGS='-Wno-missing-field-initializers' \
          cmake .. -DFORCE_EXAMPLES=ON
        cd -
    - name: make
      run: |
        cd build
        make
        cd -
    - name: install
      run: |
        cd build
        make install
        cd -
    - name: make test
      run: |
        cd build
        ctest || ctest --rerun-failed --output-on-failure -V
        cd -
    - name: build Linux wheel
      run: |
        cd python
        pip install numpy wheel
        python3 setup.py bdist_wheel
        cd -
    - name: Install python package via setup.py and test the installation
      run: |
         cd python
         python3 setup.py install --user
         cd ../bindings/python/tests
         python3 __main__.py

  # Temporary placement for this job - will eventually be moved to cd.yml
  build_manylinux_wheel_dockers:
    name: Build docker images for wheel builds
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        type: ["2010", "2014"]
        arch: [x86_64, i686]

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v1

      - name: Create docker file
        run: |
          mkdir -p docker_build_wheel

          sed \
            -e "s|{{ ARCH }}|${{ matrix.arch }}|" \
            -e "s|{{ TYPE }}|${{ matrix.type }}|" \
            .github/docker/Dockerfile-manylinux.template \
            > docker_build_wheel/Dockerfile-manylinux${{ matrix.type }}_${{ matrix.arch }}

          sed \
            -e "s|{{ ARCH }}|${{ matrix.arch }}|" \
            .github/docker/Dockerfile-musllinux_1_1.template \
            > docker_build_wheel/Dockerfile-musllinux_1_1_${{ matrix.arch }}

      - name: Build and push dockerfile
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker_build_wheel/Dockerfile-manylinux${{ matrix.type }}_${{ matrix.arch }}
          tags: dlite-manylinux${{ matrix.type }}_${{ matrix.arch }}:latest
          outputs: type=docker,dest=docker_build_wheel/Dockerfile-manylinux${{ matrix.type }}_${{ matrix.arch }}.tar

      - uses: actions/upload-artifact@v2
        with:
          name: build-wheel-dockerfiles
          path: docker_build_wheel/Dockerfile-manylinux${{ matrix.type }}_${{ matrix.arch }}.tar

  build_musllinux_wheel_dockers:
    name: Build docker images for wheel builds
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, i686]

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v1

      - name: Create docker file
        run: |
          mkdir -p docker_build_wheel

          sed \
            -e "s|{{ ARCH }}|${{ matrix.arch }}|" \
            .github/docker/Dockerfile-musllinux_1_1.template \
            > docker_build_wheel/Dockerfile-musllinux_1_1_${{ matrix.arch }}

      - name: Build and push dockerfile
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker_build_wheel/Dockerfile-musllinux_1_1_${{ matrix.arch }}
          tags: dlite-musllinux_1_1_${{ matrix.arch }}:latest
          outputs: type=docker,dest=docker_build_wheel/Dockerfile-musllinux_1_1_${{ matrix.arch }}.tar

      - uses: actions/upload-artifact@v2
        with:
          name: build-wheel-dockerfiles
          path: docker_build_wheel/Dockerfile-musllinux_1_1_${{ matrix.arch }}.tar

  build_wheels:
    name: Build wheels on ${{ matrix.os }} for ${{ matrix.image_id }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: [build_manylinux_wheel_dockers, build_musllinux_wheel_dockers]
    strategy:
      matrix:
        os: [ubuntu-20.04]
        # os: [ubuntu-20.04, windows-2019, macOS-11]
        # include:
        #   - os: ubuntu-20.04
        #     arch: x86_64
        #     image_id: manylinux2010
        #   - os: ubuntu-20.04
        #     arch: x86_64
        #     image_id: manylinux2014
        #   - os: ubuntu-20.04
        #     arch: i686
        #     image_id: manylinux2010
        #   - os: ubuntu-20.04
        #     arch: i686
        #     image_id: manylinux2014

    steps:
      - uses: actions/checkout@v2

      - uses: docker/setup-buildx-action@v1

      - uses: actions/download-artifact@v2
        with:
          name: build-wheel-dockerfiles
          path: ./docker_build_wheel

      - name: Load dockerfiles
        run: |
          ls -1 docker_build_wheel/*.tar | xargs -r -L 1 docker load -i
          docker image ls -a

      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          python -m pip install -U cibuildwheel

      # See pyproject.toml (under python/) for cibuildwheel configuration
      - name: Build wheels manylinux2010
        run: |
          python -m cibuildwheel --print-build-identifiers python
          python -m cibuildwheel --output-dir wheelhouse python
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: dlite-manylinux2010_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: dlite-manylinux2010_i686:latest
          CIBW_SKIP: pp* cp310-* *musl*
          PY_MINORS: 7 8 9

      - name: Build wheels manylinux2014 musllinux
        run: |
          python -m cibuildwheel --print-build-identifiers python
          python -m cibuildwheel --output-dir wheelhouse python
        env:
          CIBW_MANYLINUX_X86_64_IMAGE: dlite-manylinux2014_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: dlite-manylinux2014_i686:latest
          CIBW_MUSLLINUX_X86_64_IMAGE: dlite-musllinux_1_1_x86_64:latest
          CIBW_MUSLLINUX_I686_IMAGE: dlite-musllinux_1_1_i686:latest
          CIBW_SKIP: pp*

      - uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl
