name: CI build wheels

on:
  pull_request:
    branches:
      - master
  workflow_dispatch:

env:
  container_registry: ghcr.io

jobs:
  build_wheels:
    name: Build wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:

          # 64-bit manylinux
          - os: ubuntu-24.04
            system_type: ["manylinux", "_2_28"]
            arch: x86_64
            py_minors: 8,13

          # 64-bit musllinux
          - os: ubuntu-24.04
            system_type: ["musllinux", "_1_2"]
            arch: x86_64
            py_minors: 8,13

          # 32-bit manylinux
          # Python 3.8 does not have numpy2
          - os: ubuntu-24.04
            system_type: ["manylinux", "2014"]
            arch: i686
            py_minors: 10,13

          # 32-bit musllinux
          # Python 3.8 does not have numpy2
          # Python 3.12 fails since cibuildwheel still depends on distutils
          - os: ubuntu-24.04
            system_type: ["musllinux", "_1_2"]
            arch: i686
            py_minors: 9,11

          # 64-bit Windows
          - os: windows-2022
            system_type: ["win", ""]
            arch: amd64
            py_minors: 8,13

          # 32-bit Windows
          # See issue #220: https://github.com/SINTEF/dlite/issues/220
          # - os: windows-2019
          #   system_type: ["win32", ""]
          #   arch: ""
          #   py_minors: 8,13

          # 64-bit (Intel) macOS
          - os: macos-13
            system_type: ["macosx", ""]
            arch: x86_64
            py_minors: 8,13
            deployment-target: 11

          # 64-bit (Apple Silicon) macOS
          - os: macos-14
            system_type: ["macosx", ""]
            arch: arm64
            py_minors: 8,13
            deployment-target: 11

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.${{ contains(matrix.py_minors, ',') && 'x' || matrix.py_minors }}"
          architecture: ${{ matrix.arch == '' && 'x86' || matrix.arch == 'arm64' && 'arm64' || 'x64' }}

      - name: Install Python from python.org
        if: runner.os == 'macOS' && contains(matrix.py_minors, 8)
        run: |
          url="https://www.python.org/ftp/python/3.8.10/python-3.8.10-macos11.pkg"
          curl $url -o python-3.8.10-macos11.pkg
          sudo installer -pkg python-3.8.10-macos11.pkg -target /

      - name: Login to GitHub Container Registry
        if: startsWith(matrix.os, 'ubuntu')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Install cibuildwheel
        run: |
          python -m pip install -U pip
          python -m pip install -U setuptools wheel
          python -m pip install -U cibuildwheel

      # See pyproject.toml (under python/) for cibuildwheel configuration
      - name: Build wheels with cibuildwheel
        run: |
          python -m cibuildwheel --print-build-identifiers python
          python -m cibuildwheel --output-dir wheelhouse python
        env:
          CIBW_BUILD: cp3${{ contains(matrix.py_minors, ',') && format('{{{0}}}', matrix.py_minors) || matrix.py_minors }}-${{ matrix.system_type[0] }}${{ matrix.arch != '' && '_' || '' }}${{ matrix.arch }}
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-manylinux${{ matrix.system_type[1] }}_x86_64:latest
          CIBW_MANYLINUX_I686_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-manylinux${{ matrix.system_type[1] }}_i686:latest
          CIBW_MUSLLINUX_X86_64_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-musllinux${{ matrix.system_type[1] }}_x86_64:latest
          CIBW_MUSLLINUX_I686_IMAGE: ${{ env.container_registry }}/sintef/dlite-python-musllinux${{ matrix.system_type[1] }}_i686:latest
          MACOSX_DEPLOYMENT_TARGET: ${{ matrix.deployment-target }}
          CIBW_ENVIRONMENT: MACOSX_DEPLOYMENT_TARGET=${{ matrix.deployment-target }}
