/* -*- C -*-  (not really, but good for syntax highlighting) */

/* This file is generated with dlite-codegen {dlite.version} -- do not edit!
 *
 * Template: c-source.txt
 * Metadata: {_uri}
 *
 * This file instantiate a hardcoded instance of metadata {meta.name}.
 *
 * This allows you to use instances of {name} without first loading
 * the corresponding json file defining {name}.  For specialised instances
 * who's header is generated with the c-ext_header.txt template, one
 * should instantiate the corresponding metadata using the c-source.txt
 * template.
 *
 * Some optional variables used by this template:
 *
 *     include
 *         Custom header file to include.  This must be set if {name}
 *         is extended.  This header should define the macro
 *         `{name%M}ExtValues` with the values of the additional
 *         fields.
 *     header
 *         Name of corresponding header file generated with c-header.txt
 *     meta_header
 *         Name of corresponding header file generated with c-meta-header.txt
 *     struct_name
 *         Name of generated struct to be included from {name%u}_schema.h
 *         Use the c-meta-header template for generating that file.
 *     _init
 *         Name of _init() function
 *     _deinit
 *         Name of _deinit() function
 *     _getdim
 *         Name of _getdim() function
 *     _setdim
 *         Name of _setdim() function
 *     _loadprop
 *         Name of _loadprop() function
 *     _saveprop
 *         Name of _saveprop() function
 */
{@if: {isdata} }\
{@error:Generating C code for data instances is currently not supported.}
{@endif}\
\
{dim0={list_dimensions:{@if:{dim.i}=0}{dim.name}{@endif}\.}\.}\
{prop0={list_properties:{@if:{prop.i}=0}{prop.name}{@endif}\.}\.}\
\
{@if: {basename?}=0 }\
{basename={name%M}\.}\
{@endif}\
\
{@if: {struct_name?}=0 }\
{struct_name={basename}Schema}\
{@endif}\
\
{@if: {header?}=0 }\
{header={name%u}.h}\
{@endif}\
\
{@if: {meta_header?}=0 }\
{meta_header={name%u}_schema.h}\
{@endif}\
\
\
#include <stddef.h>
\
{@if: {include?} }\

#include "{include}"
{@endif}\

{@if: {ismeta} }\
#include "{header}"
{@endif}\
#include "{meta_header}"
#define {basename}Struct {struct_name}


{@if: {ismeta} }\
static DLiteDimension {name%u}_dimensions[] = {{
{list_dimensions:  {{"{dim.name}", "{dim.descr}"}}{,}\n}\
}};

{list_properties:\
{@if:{prop.ndims}!0}\
static char *{name%u}_prop_{prop.name}_dims[] = {{\
{prop.dims:"{dim.name}"{, }\.}\
}};
{@endif}\.}\

static DLiteProperty {name%u}_properties[] = {{
{list_properties:  {{
    "{prop.name}", {@40}/* name */
    {prop.dtype},  {@40}/* type */
    {prop.size},   {@40}/* size */
    {prop.ndims},  {@40}/* ndims */
{@if:{prop.ndims}=0}\
    NULL,          {@40}/* dims */
{@else}\
    {name%u}_prop_{prop.name}_dims, {@40}/* dims */
{@endif}\
{@if:"{prop.unit}"}\
    "{prop.unit}", {@40}/* unit */
{@else}\
    NULL,          {@40}/* unit */
{@endif}\
{@if:"{prop.iri}"}\
    "{prop.iri}",  {@40}/* iri */
{@else}\
    NULL,          {@40}/* iri */
{@endif}\
{@if:"{prop.descr}"}\
    "{prop.descr}" {@40}/* description */
{@else}\
    NULL           {@40}/* description */
{@endif}\
  }}{,}
}\
}};
{@endif}\


static {basename}Struct {name%u} = {{
#ifdef HAVE_DLITE
  /* -- {basename}Struct_HEAD */
  "{_uuid}",  {@52}/* _uuid */
  "{_uri}",   {@52}/* _uri */
  1,                        {@52}/* _refcount */
  NULL,                     {@52}/* _meta */
{@if:"{_iri}"}\
  "{_iri}",                 {@52}/* _iri */
{@else}\
  NULL,                     {@52}/* _iri */
{@endif}\
{@if:{ismeta}=1}
  {_ndimensions},           {@52}/* _ndimensions */
  {_nproperties},           {@52}/* _nproperties */
  {_nrelations},            {@52}/* _nrelations */

  {name%u}_dimensions,      {@52}/* _dimensions */
  {name%u}_properties,      {@52}/* _properties */
  NULL,                     {@52}/* _relations */

  offsetof({basename}, {dim0}), {@52}/* _headersize */
  {_init},                  {@52}/* _init */
  {_deinit},                {@52}/* _deinit */
  {_getdim},                {@52}/* _getdim */
  {_setdim},                {@52}/* _setdim */
  {_loadprop},              {@52}/* _loadprop */
  {_saveprop},              {@52}/* _saveprop */

  {_npropdims},             {@52}/* _npropdims */
  {name%u}.__propdiminds,   {@52}/* _propdiminds */

  {_dimoffset},             {@52}/* _dimoffset */
  {name%u}.__propoffsets,   {@52}/* _propoffsets */
  {_reloffset},             {@52}/* _reloffset */
  {_propdimsoffset},        {@52}/* _propdimsoffset */
  {_propdimindsoffset},     {@52}/* _propdimindsoffset */
{@endif}\
#endif

#ifdef {basename}ExtValues
{basename}ExtValues
#endif

  /* -- length of each dimension */
{list_meta_dimensions:  {dim.value}, {@52}/* {dim.name} */\n}\

  /* -- value of each property */
{list_meta_properties:  {prop.cvalue}, {@52}/* {prop.name} */\n}\

  /* -- value of each relation */
{list_meta_relations:  {{"{rel.s}", "{rel.p}", "{rel.o}", "{rel.id}"}}{,}\n}\

#ifdef HAVE_DLITE
  /* -- {basename}Struct_TAIL */
  {{ {list_propdims:{propdim.n}{, }\.} }},{@52}/* __propdims */
{@if:{ismeta}=1}\
  {{ {list_properties:{prop.dimind}{, }\.} }},{@52}/* __propdiminds */
  {{                        {@52}/* __propoffsets */
{list_properties:    offsetof({basename}, {prop.name}){,}\n}\
  }}
{@endif}\
#endif
}};


/** Returns a pointer to hardcoded instance of {meta.name}. */
const {basename}Struct *get_{name%u}()
{{
   {basename}Struct *inst = &{name%u};
#ifdef HAVE_DLITE
  static int initialized=0;
  if (!initialized) {{
    inst->meta = dlite_meta_get("{meta.uri}");
{@if: {ismeta} }\

    /* Should not be needed, but it doesn't hurt to re-initialise... */
    dlite_meta_init((DLiteMeta *)inst);

    /* Call _init(), if it is given */
    if (((DLiteMeta *)inst)->_init)
      ((DLiteMeta *)inst)->_init((DLiteInstance *)inst);
{@endif}\

    initialized = 1;
  }}
#endif
  return inst;
}}
